<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/todolist/app/MainActivity.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/todolist/app/MainActivity.java" />
              <option name="originalContent" value="package com.todolist.app;&#10;&#10;import android.content.Intent;&#10;import android.os.Bundle;&#10;import android.view.Gravity;&#10;import android.view.View;&#10;import android.widget.*;&#10;import androidx.appcompat.app.AlertDialog;&#10;import androidx.appcompat.app.AppCompatActivity;&#10;import com.todolist.app.activities.CalendarHistoryActivity;&#10;import com.todolist.app.activities.CharacterShopActivity;&#10;import com.todolist.app.managers.GameManager;&#10;import com.todolist.app.managers.TaskManager;&#10;import com.todolist.app.models.Character;&#10;import com.todolist.app.models.TaskItem;&#10;import com.todolist.app.ui.UIStyleHelper;&#10;import java.util.ArrayList;&#10;&#10;public class MainActivity extends AppCompatActivity {&#10;    private GameManager gameManager;&#10;    private TaskManager taskManager;&#10;    private final ArrayList&lt;TaskItem&gt; currentTasks = new ArrayList&lt;&gt;();&#10;&#10;    // UI Components&#10;    private LinearLayout todocontainer;&#10;    private EditText todoedittext;&#10;    private TextView coinsDisplay;&#10;    private TextView characterStatus;&#10;    private Spinner taskTypeSpinner;&#10;    private ScrollView mainScrollView;&#10;&#10;    @Override&#10;    protected void onCreate(Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;&#10;        // Initialize managers&#10;        gameManager = GameManager.getInstance();&#10;        taskManager = TaskManager.getInstance();&#10;&#10;        createHabiticaStyleUI();&#10;&#10;        // Update displays&#10;        updateGameStatus();&#10;        loadCurrentTasks();&#10;    }&#10;&#10;    private void createHabiticaStyleUI() {&#10;        // Main container with background&#10;        LinearLayout mainContainer = new LinearLayout(this);&#10;        mainContainer.setOrientation(LinearLayout.VERTICAL);&#10;        mainContainer.setBackgroundColor(UIStyleHelper.Colors.BACKGROUND);&#10;&#10;        // Create game status bar&#10;        createGameStatusBar(mainContainer);&#10;&#10;        // Create navigation section&#10;        createNavigationSection(mainContainer);&#10;&#10;        // Create task input section&#10;        createTaskInputSection(mainContainer);&#10;&#10;        // Create tasks display section&#10;        createTasksDisplaySection(mainContainer);&#10;&#10;        setContentView(mainContainer);&#10;    }&#10;&#10;    private void createGameStatusBar(LinearLayout parent) {&#10;        LinearLayout statusBar = UIStyleHelper.createGameStatusBar(this);&#10;&#10;        // App title with icon&#10;        LinearLayout titleSection = new LinearLayout(this);&#10;        titleSection.setOrientation(LinearLayout.HORIZONTAL);&#10;        titleSection.setGravity(Gravity.CENTER_VERTICAL);&#10;        titleSection.setLayoutParams(new LinearLayout.LayoutParams(0, LinearLayout.LayoutParams.WRAP_CONTENT, 1));&#10;&#10;        TextView gameIcon = new TextView(this);&#10;        gameIcon.setText(&quot;&quot;);&#10;        gameIcon.setTextSize(24);&#10;        gameIcon.setPadding(0, 0, 12, 0);&#10;&#10;        TextView appTitle = new TextView(this);&#10;        appTitle.setText(&quot;Epic Quest List&quot;);&#10;        appTitle.setTextSize(20);&#10;        appTitle.setTextColor(UIStyleHelper.Colors.WHITE);&#10;        appTitle.setTypeface(null, android.graphics.Typeface.BOLD);&#10;&#10;        titleSection.addView(gameIcon);&#10;        titleSection.addView(appTitle);&#10;&#10;        // Coins display&#10;        coinsDisplay = new TextView(this);&#10;        coinsDisplay.setTextSize(16);&#10;        coinsDisplay.setTextColor(UIStyleHelper.Colors.WHITE);&#10;        coinsDisplay.setTypeface(null, android.graphics.Typeface.BOLD);&#10;&#10;        // Character status&#10;        characterStatus = new TextView(this);&#10;        characterStatus.setTextSize(12);&#10;        characterStatus.setTextColor(UIStyleHelper.Colors.WHITE);&#10;&#10;        LinearLayout statusSection = new LinearLayout(this);&#10;        statusSection.setOrientation(LinearLayout.VERTICAL);&#10;        statusSection.setGravity(Gravity.END);&#10;        statusSection.addView(coinsDisplay);&#10;        statusSection.addView(characterStatus);&#10;&#10;        statusBar.addView(titleSection);&#10;        statusBar.addView(statusSection);&#10;        parent.addView(statusBar);&#10;    }&#10;&#10;    private void createNavigationSection(LinearLayout parent) {&#10;        LinearLayout navContainer = new LinearLayout(this);&#10;        navContainer.setOrientation(LinearLayout.HORIZONTAL);&#10;        navContainer.setPadding(16, 16, 16, 8);&#10;        navContainer.setBackgroundColor(UIStyleHelper.Colors.WHITE);&#10;&#10;        Button characterShopButton = new Button(this);&#10;        characterShopButton.setText(&quot; &quot; + getString(R.string.character_shop));&#10;        characterShopButton.setLayoutParams(new LinearLayout.LayoutParams(0, LinearLayout.LayoutParams.WRAP_CONTENT, 1));&#10;        UIStyleHelper.stylePrimaryButton(characterShopButton);&#10;        characterShopButton.setOnClickListener(v -&gt; {&#10;            Intent intent = new Intent(this, CharacterShopActivity.class);&#10;            startActivity(intent);&#10;        });&#10;&#10;        // Add spacing&#10;        View spacing1 = new View(this);&#10;        spacing1.setLayoutParams(new LinearLayout.LayoutParams(16, LinearLayout.LayoutParams.MATCH_PARENT));&#10;&#10;        Button historyButton = new Button(this);&#10;        historyButton.setText(&quot; &quot; + getString(R.string.calendar_history));&#10;        historyButton.setLayoutParams(new LinearLayout.LayoutParams(0, LinearLayout.LayoutParams.WRAP_CONTENT, 1));&#10;        UIStyleHelper.styleSecondaryButton(historyButton);&#10;        historyButton.setOnClickListener(v -&gt; {&#10;            Intent intent = new Intent(this, CalendarHistoryActivity.class);&#10;            startActivity(intent);&#10;        });&#10;&#10;        navContainer.addView(characterShopButton);&#10;        navContainer.addView(spacing1);&#10;        navContainer.addView(historyButton);&#10;&#10;        // Add shadow separator&#10;        View separator = new View(this);&#10;        separator.setLayoutParams(new LinearLayout.LayoutParams(LinearLayout.LayoutParams.MATCH_PARENT, 3));&#10;        separator.setBackgroundColor(UIStyleHelper.Colors.DARK_GRAY);&#10;&#10;        parent.addView(navContainer);&#10;        parent.addView(separator);&#10;    }&#10;&#10;    private void createTaskInputSection(LinearLayout parent) {&#10;        LinearLayout inputContainer = UIStyleHelper.createTaskTypeContainer(this, UIStyleHelper.Colors.PRIMARY_BLUE);&#10;        inputContainer.setPadding(20, 20, 20, 20);&#10;&#10;        // Section title&#10;        TextView sectionTitle = new TextView(this);&#10;        UIStyleHelper.styleHeaderText(sectionTitle, &quot;✨ Create New Quest&quot;);&#10;&#10;        // Task type selector with icon&#10;        LinearLayout typeSection = new LinearLayout(this);&#10;        typeSection.setOrientation(LinearLayout.HORIZONTAL);&#10;        typeSection.setGravity(Gravity.CENTER_VERTICAL);&#10;        typeSection.setPadding(0, 8, 0, 12);&#10;&#10;        TextView typeIcon = new TextView(this);&#10;        typeIcon.setText(&quot;&quot;);&#10;        typeIcon.setTextSize(18);&#10;        typeIcon.setPadding(0, 0, 12, 0);&#10;&#10;        TextView typeLabel = new TextView(this);&#10;        UIStyleHelper.styleBodyText(typeLabel, &quot;Quest Type:&quot;);&#10;        typeLabel.setLayoutParams(new LinearLayout.LayoutParams(0, LinearLayout.LayoutParams.WRAP_CONTENT, 1));&#10;&#10;        typeSection.addView(typeIcon);&#10;        typeSection.addView(typeLabel);&#10;&#10;        taskTypeSpinner = new Spinner(this);&#10;        String[] taskTypes = {&#10;            &quot; To-Do Quest&quot;,&#10;            &quot; Daily Habit&quot;,&#10;            &quot; Master Plan&quot;,&#10;            &quot;⭐ Epic Activity&quot;&#10;        };&#10;        ArrayAdapter&lt;String&gt; adapter = new ArrayAdapter&lt;&gt;(this, android.R.layout.simple_spinner_item, taskTypes);&#10;        adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);&#10;        taskTypeSpinner.setAdapter(adapter);&#10;        taskTypeSpinner.setPadding(16, 12, 16, 12);&#10;&#10;        // Task input with styling&#10;        todoedittext = new EditText(this);&#10;        todoedittext.setHint(&quot;Enter your epic quest...&quot;);&#10;        todoedittext.setTextSize(16);&#10;        todoedittext.setPadding(20, 16, 20, 16);&#10;        todoedittext.setBackgroundDrawable(UIStyleHelper.createStrokedBackground(&#10;            UIStyleHelper.Colors.WHITE, UIStyleHelper.Colors.PRIMARY_BLUE, 2, 12&#10;        ));&#10;&#10;        taskTypeSpinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {&#10;            @Override&#10;            public void onItemSelected(AdapterView&lt;?&gt; parent, View view, int position, long id) {&#10;                updateTaskHint();&#10;            }&#10;&#10;            @Override&#10;            public void onNothingSelected(AdapterView&lt;?&gt; parent) {}&#10;        });&#10;&#10;        Button addButton = new Button(this);&#10;        addButton.setText(&quot;⚔️ &quot; + getString(R.string.add_todo));&#10;        UIStyleHelper.styleSuccessButton(addButton);&#10;        addButton.setOnClickListener(v -&gt; {&#10;            String taskText = todoedittext.getText().toString().trim();&#10;            if (!taskText.isEmpty()) {&#10;                addNewTask(taskText);&#10;                todoedittext.setText(&quot;&quot;);&#10;&#10;                // Show success animation&#10;                Toast.makeText(this, &quot; Quest added successfully!&quot;, Toast.LENGTH_SHORT).show();&#10;            } else {&#10;                Toast.makeText(this, &quot;⚠️ Please enter a quest description!&quot;, Toast.LENGTH_SHORT).show();&#10;            }&#10;        });&#10;&#10;        inputContainer.addView(sectionTitle);&#10;        inputContainer.addView(typeSection);&#10;        inputContainer.addView(taskTypeSpinner);&#10;&#10;        // Add spacing&#10;        View spacing = new View(this);&#10;        spacing.setLayoutParams(new LinearLayout.LayoutParams(LinearLayout.LayoutParams.MATCH_PARENT, 16));&#10;        inputContainer.addView(spacing);&#10;&#10;        inputContainer.addView(todoedittext);&#10;&#10;        // Add spacing&#10;        View spacing2 = new View(this);&#10;        spacing2.setLayoutParams(new LinearLayout.LayoutParams(LinearLayout.LayoutParams.MATCH_PARENT, 16));&#10;        inputContainer.addView(spacing2);&#10;&#10;        inputContainer.addView(addButton);&#10;&#10;        // Add margin to container&#10;        LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(&#10;            LinearLayout.LayoutParams.MATCH_PARENT, LinearLayout.LayoutParams.WRAP_CONTENT&#10;        );&#10;        params.setMargins(16, 16, 16, 8);&#10;        inputContainer.setLayoutParams(params);&#10;&#10;        parent.addView(inputContainer);&#10;    }&#10;&#10;    private void createTasksDisplaySection(LinearLayout parent) {&#10;        // Section header&#10;        LinearLayout headerSection = new LinearLayout(this);&#10;        headerSection.setOrientation(LinearLayout.HORIZONTAL);&#10;        headerSection.setPadding(20, 16, 20, 8);&#10;        headerSection.setBackgroundColor(UIStyleHelper.Colors.WHITE);&#10;&#10;        TextView activeQuestsTitle = new TextView(this);&#10;        UIStyleHelper.styleHeaderText(activeQuestsTitle, &quot;⚔️ Active Quests&quot;);&#10;        activeQuestsTitle.setLayoutParams(new LinearLayout.LayoutParams(0, LinearLayout.LayoutParams.WRAP_CONTENT, 1));&#10;&#10;        TextView questCount = new TextView(this);&#10;        questCount.setText(&quot;0 quests&quot;);&#10;        questCount.setTextSize(14);&#10;        questCount.setTextColor(UIStyleHelper.Colors.DARK_GRAY);&#10;        questCount.setGravity(Gravity.END);&#10;&#10;        headerSection.addView(activeQuestsTitle);&#10;        headerSection.addView(questCount);&#10;&#10;        mainScrollView = new ScrollView(this);&#10;        mainScrollView.setFillViewport(true);&#10;&#10;        todocontainer = new LinearLayout(this);&#10;        todocontainer.setOrientation(LinearLayout.VERTICAL);&#10;        todocontainer.setPadding(8, 8, 8, 8);&#10;&#10;        mainScrollView.addView(todocontainer);&#10;&#10;        parent.addView(headerSection);&#10;        parent.addView(mainScrollView);&#10;    }&#10;&#10;    private void updateTaskHint() {&#10;        int selectedType = taskTypeSpinner.getSelectedItemPosition();&#10;        String[] hints = {&#10;            &quot;Enter your to-do quest...&quot;,&#10;            &quot;Enter your daily habit...&quot;,&#10;            &quot;Enter your master plan...&quot;,&#10;            &quot;Enter your epic activity...&quot;&#10;        };&#10;        todoedittext.setHint(hints[selectedType]);&#10;    }&#10;&#10;    private void addNewTask(String taskText) {&#10;        TaskItem.TaskType type = getSelectedTaskType();&#10;        TaskItem newTask = new TaskItem(taskText, type);&#10;&#10;        currentTasks.add(newTask);&#10;        taskManager.addTask(newTask);&#10;&#10;        addTaskToUI(newTask);&#10;        updateQuestCount();&#10;    }&#10;&#10;    private TaskItem.TaskType getSelectedTaskType() {&#10;        int selectedType = taskTypeSpinner.getSelectedItemPosition();&#10;        switch (selectedType) {&#10;            case 0: return TaskItem.TaskType.TODO;&#10;            case 1: return TaskItem.TaskType.HABIT;&#10;            case 2: return TaskItem.TaskType.PLANNING;&#10;            case 3: return TaskItem.TaskType.DAILY_ACTIVITY;&#10;            default: return TaskItem.TaskType.TODO;&#10;        }&#10;    }&#10;&#10;    private void addTaskToUI(TaskItem task) {&#10;        int typeColor = getTaskTypeColor(task.getType());&#10;&#10;        LinearLayout taskCard = new LinearLayout(this);&#10;        taskCard.setOrientation(LinearLayout.VERTICAL);&#10;        UIStyleHelper.styleTaskCard(taskCard, typeColor);&#10;&#10;        // Task header with emoji, title and reward&#10;        LinearLayout headerLayout = new LinearLayout(this);&#10;        headerLayout.setOrientation(LinearLayout.HORIZONTAL);&#10;        headerLayout.setGravity(Gravity.CENTER_VERTICAL);&#10;&#10;        TextView taskIcon = new TextView(this);&#10;        taskIcon.setText(getTaskTypeEmoji(task.getType()));&#10;        taskIcon.setTextSize(20);&#10;        taskIcon.setPadding(0, 0, 12, 0);&#10;&#10;        TextView taskTitle = new TextView(this);&#10;        taskTitle.setText(task.getTitle());&#10;        taskTitle.setTextSize(18);&#10;        taskTitle.setTextColor(UIStyleHelper.Colors.DARK_GRAY);&#10;        taskTitle.setTypeface(null, android.graphics.Typeface.BOLD);&#10;        taskTitle.setLayoutParams(new LinearLayout.LayoutParams(0, LinearLayout.LayoutParams.WRAP_CONTENT, 1));&#10;&#10;        TextView rewardBadge = new TextView(this);&#10;        rewardBadge.setText(&quot; +&quot; + task.getCoinReward());&#10;        rewardBadge.setTextSize(14);&#10;        rewardBadge.setTextColor(UIStyleHelper.Colors.GOLD);&#10;        rewardBadge.setTypeface(null, android.graphics.Typeface.BOLD);&#10;        rewardBadge.setBackground(UIStyleHelper.createRoundedBackground(&#10;            UIStyleHelper.adjustColorAlpha(UIStyleHelper.Colors.GOLD, 0.2f), 12&#10;        ));&#10;        rewardBadge.setPadding(12, 6, 12, 6);&#10;&#10;        headerLayout.addView(taskIcon);&#10;        headerLayout.addView(taskTitle);&#10;        headerLayout.addView(rewardBadge);&#10;&#10;        // Task info section&#10;        TextView taskInfo = new TextView(this);&#10;        String typeText = task.getType().toString().replace(&quot;_&quot;, &quot; &quot;);&#10;        taskInfo.setText(&quot; &quot; + typeText + &quot; • Penalty: -&quot; + task.getCoinPenalty() + &quot; coins&quot;);&#10;        taskInfo.setTextSize(12);&#10;        taskInfo.setTextColor(UIStyleHelper.Colors.DARK_GRAY);&#10;        taskInfo.setPadding(32, 8, 0, 12);&#10;&#10;        // Action buttons with improved styling&#10;        LinearLayout buttonLayout = new LinearLayout(this);&#10;        buttonLayout.setOrientation(LinearLayout.HORIZONTAL);&#10;        buttonLayout.setPadding(0, 8, 0, 0);&#10;&#10;        Button completeButton = new Button(this);&#10;        completeButton.setText(&quot;✅ Complete&quot;);&#10;        completeButton.setLayoutParams(new LinearLayout.LayoutParams(0, LinearLayout.LayoutParams.WRAP_CONTENT, 1));&#10;        UIStyleHelper.styleSuccessButton(completeButton);&#10;        completeButton.setOnClickListener(v -&gt; completeTask(task, taskCard));&#10;&#10;        Button failButton = new Button(this);&#10;        failButton.setText(&quot;❌ Fail&quot;);&#10;        failButton.setLayoutParams(new LinearLayout.LayoutParams(0, LinearLayout.LayoutParams.WRAP_CONTENT, 1));&#10;        UIStyleHelper.styleDangerButton(failButton);&#10;        failButton.setOnClickListener(v -&gt; failTask(task, taskCard));&#10;&#10;        Button deleteButton = new Button(this);&#10;        deleteButton.setText(&quot;️ Delete&quot;);&#10;        deleteButton.setLayoutParams(new LinearLayout.LayoutParams(0, LinearLayout.LayoutParams.WRAP_CONTENT, 1));&#10;        UIStyleHelper.styleWarningButton(deleteButton);&#10;        deleteButton.setOnClickListener(v -&gt; deleteTask(task, taskCard));&#10;&#10;        // Add spacing between buttons&#10;        View spacing1 = new View(this);&#10;        spacing1.setLayoutParams(new LinearLayout.LayoutParams(8, LinearLayout.LayoutParams.MATCH_PARENT));&#10;        View spacing2 = new View(this);&#10;        spacing2.setLayoutParams(new LinearLayout.LayoutParams(8, LinearLayout.LayoutParams.MATCH_PARENT));&#10;&#10;        buttonLayout.addView(completeButton);&#10;        buttonLayout.addView(spacing1);&#10;        buttonLayout.addView(failButton);&#10;        buttonLayout.addView(spacing2);&#10;        buttonLayout.addView(deleteButton);&#10;&#10;        taskCard.addView(headerLayout);&#10;        taskCard.addView(taskInfo);&#10;        taskCard.addView(buttonLayout);&#10;&#10;        // Add ripple effect&#10;        UIStyleHelper.addRippleEffect(taskCard);&#10;&#10;        todocontainer.addView(taskCard);&#10;    }&#10;&#10;    private int getTaskTypeColor(TaskItem.TaskType type) {&#10;        switch (type) {&#10;            case TODO: return UIStyleHelper.Colors.TODO_COLOR;&#10;            case HABIT: return UIStyleHelper.Colors.HABIT_COLOR;&#10;            case PLANNING: return UIStyleHelper.Colors.PLANNING_COLOR;&#10;            case DAILY_ACTIVITY: return UIStyleHelper.Colors.DAILY_COLOR;&#10;            default: return UIStyleHelper.Colors.PRIMARY_BLUE;&#10;        }&#10;    }&#10;&#10;    private String getTaskTypeEmoji(TaskItem.TaskType type) {&#10;        switch (type) {&#10;            case TODO: return &quot;&quot;;&#10;            case HABIT: return &quot;&quot;;&#10;            case PLANNING: return &quot;&quot;;&#10;            case DAILY_ACTIVITY: return &quot;⭐&quot;;&#10;            default: return &quot;&quot;;&#10;        }&#10;    }&#10;&#10;    private void completeTask(TaskItem task, LinearLayout taskLayout) {&#10;        if (gameManager.completeTask(task)) {&#10;            // Update task in TaskManager as well&#10;            taskManager.updateTask(task);&#10;&#10;            showSuccessMessage(&quot; Quest Completed! +&quot; + task.getCoinReward() + &quot; coins earned!&quot;);&#10;&#10;            // Check if character was revived&#10;            Character activeChar = gameManager.getActiveCharacter();&#10;            if (activeChar != null &amp;&amp; activeChar.getStatus() == Character.CharacterStatus.ALIVE) {&#10;                if (!gameManager.hasCompletedTaskToday()) {&#10;                    showSuccessMessage(&quot;✨ &quot; + getString(R.string.character_revived));&#10;                }&#10;            }&#10;&#10;            removeTaskFromUI(task, taskLayout);&#10;            updateGameStatus();&#10;            updateQuestCount();&#10;        }&#10;    }&#10;&#10;    private void failTask(TaskItem task, LinearLayout taskLayout) {&#10;        new AlertDialog.Builder(this)&#10;            .setTitle(&quot; Fail Quest&quot;)&#10;            .setMessage(&quot;Are you sure you want to fail this quest? You will lose &quot; + task.getCoinPenalty() + &quot; coins and your character might be in danger!&quot;)&#10;            .setPositiveButton(&quot; Yes, Fail&quot;, (dialog, which) -&gt; {&#10;                gameManager.failTask(task);&#10;                taskManager.updateTask(task);&#10;&#10;                showErrorMessage(&quot; Quest Failed! -&quot; + task.getCoinPenalty() + &quot; coins lost!&quot;);&#10;&#10;                // Check if character died&#10;                Character activeChar = gameManager.getActiveCharacter();&#10;                if (activeChar != null &amp;&amp; activeChar.getStatus() == Character.CharacterStatus.DEAD) {&#10;                    showErrorMessage(&quot;☠️ &quot; + getString(R.string.character_dead));&#10;                }&#10;&#10;                removeTaskFromUI(task, taskLayout);&#10;                updateGameStatus();&#10;                updateQuestCount();&#10;            })&#10;            .setNegativeButton(&quot;️ Keep Fighting&quot;, null)&#10;            .show();&#10;    }&#10;&#10;    private void deleteTask(TaskItem task, LinearLayout taskLayout) {&#10;        new AlertDialog.Builder(this)&#10;            .setTitle(&quot;️ Delete Quest&quot;)&#10;            .setMessage(&quot;Are you sure you want to delete this quest? This action cannot be undone.&quot;)&#10;            .setPositiveButton(&quot;️ Delete&quot;, (dialog, which) -&gt; {&#10;                removeTaskFromUI(task, taskLayout);&#10;                updateQuestCount();&#10;            })&#10;            .setNegativeButton(&quot; Keep&quot;, null)&#10;            .show();&#10;    }&#10;&#10;    private void removeTaskFromUI(TaskItem task, LinearLayout taskLayout) {&#10;        currentTasks.remove(task);&#10;        taskManager.removeTask(task);&#10;        todocontainer.removeView(taskLayout);&#10;    }&#10;&#10;    private void loadCurrentTasks() {&#10;        todocontainer.removeAllViews();&#10;        for (TaskItem task : currentTasks) {&#10;            if (task.getStatus() == TaskItem.TaskStatus.PENDING) {&#10;                addTaskToUI(task);&#10;            }&#10;        }&#10;        updateQuestCount();&#10;    }&#10;&#10;    private void updateGameStatus() {&#10;        // Update coins display with beautiful styling&#10;        UIStyleHelper.styleCoinDisplay(coinsDisplay, gameManager.getCoins());&#10;&#10;        // Update character status with styling&#10;        Character activeChar = gameManager.getActiveCharacter();&#10;        if (activeChar != null) {&#10;            boolean isAlive = activeChar.getStatus() == Character.CharacterStatus.ALIVE;&#10;            String status = (isAlive ? &quot; &quot; : &quot; &quot;) + activeChar.getName() + &quot; (Lv.&quot; + activeChar.getLevel() + &quot;)&quot;;&#10;            UIStyleHelper.styleCharacterStatus(characterStatus, status, isAlive);&#10;        } else {&#10;            characterStatus.setText(&quot; No active character&quot;);&#10;            characterStatus.setTextColor(UIStyleHelper.Colors.DANGER_RED);&#10;        }&#10;    }&#10;&#10;    private void updateQuestCount() {&#10;        // Find and update quest count&#10;        TextView questCount = findViewById(android.R.id.text1); // This would need proper ID management&#10;        if (questCount != null) {&#10;            int activeCount = 0;&#10;            for (TaskItem task : currentTasks) {&#10;                if (task.getStatus() == TaskItem.TaskStatus.PENDING) {&#10;                    activeCount++;&#10;                }&#10;            }&#10;            questCount.setText(activeCount + &quot; active quests&quot;);&#10;        }&#10;    }&#10;&#10;    private void showSuccessMessage(String message) {&#10;        Toast toast = Toast.makeText(this, message, Toast.LENGTH_LONG);&#10;        toast.show();&#10;    }&#10;&#10;    private void showErrorMessage(String message) {&#10;        Toast toast = Toast.makeText(this, message, Toast.LENGTH_LONG);&#10;        toast.show();&#10;    }&#10;&#10;    @Override&#10;    protected void onResume() {&#10;        super.onResume();&#10;        updateGameStatus(); // Update when returning from other activities&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.todolist.app;&#10;&#10;import android.content.Intent;&#10;import android.os.Bundle;&#10;import android.view.Gravity;&#10;import android.view.View;&#10;import android.widget.*;&#10;import androidx.appcompat.app.AlertDialog;&#10;import androidx.appcompat.app.AppCompatActivity;&#10;import com.todolist.app.activities.CalendarHistoryActivity;&#10;import com.todolist.app.activities.CharacterShopActivity;&#10;import com.todolist.app.managers.GameManager;&#10;import com.todolist.app.managers.TaskManager;&#10;import com.todolist.app.managers.ReminderManager;&#10;import com.todolist.app.models.Character;&#10;import com.todolist.app.models.TaskItem;&#10;import com.todolist.app.ui.UIStyleHelper;&#10;import com.todolist.app.ui.TimeReminderDialog;&#10;import java.text.SimpleDateFormat;&#10;import java.util.ArrayList;&#10;import java.util.Date;&#10;import java.util.Locale;&#10;&#10;public class MainActivity extends AppCompatActivity {&#10;    private GameManager gameManager;&#10;    private TaskManager taskManager;&#10;    private ReminderManager reminderManager;&#10;    private final ArrayList&lt;TaskItem&gt; currentTasks = new ArrayList&lt;&gt;();&#10;    &#10;    // UI Components&#10;    private LinearLayout todocontainer;&#10;    private EditText todoedittext;&#10;    private TextView coinsDisplay;&#10;    private TextView characterStatus;&#10;    private Spinner taskTypeSpinner;&#10;    private ScrollView mainScrollView;&#10;    private LinearLayout urgentTasksContainer;&#10;&#10;    @Override&#10;    protected void onCreate(Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;        &#10;        // Initialize managers&#10;        gameManager = GameManager.getInstance();&#10;        taskManager = TaskManager.getInstance();&#10;        reminderManager = ReminderManager.getInstance();&#10;        reminderManager.initialize(this);&#10;&#10;        createHabiticaStyleUI();&#10;        &#10;        // Update displays&#10;        updateGameStatus();&#10;        loadCurrentTasks();&#10;        showUrgentTasks();&#10;    }&#10;    &#10;    private void createHabiticaStyleUI() {&#10;        // Main container with background&#10;        LinearLayout mainContainer = new LinearLayout(this);&#10;        mainContainer.setOrientation(LinearLayout.VERTICAL);&#10;        mainContainer.setBackgroundColor(UIStyleHelper.Colors.BACKGROUND);&#10;        &#10;        // Create game status bar&#10;        createGameStatusBar(mainContainer);&#10;        &#10;        // Create urgent tasks section&#10;        createUrgentTasksSection(mainContainer);&#10;        &#10;        // Create navigation section&#10;        createNavigationSection(mainContainer);&#10;        &#10;        // Create task input section&#10;        createTaskInputSection(mainContainer);&#10;        &#10;        // Create tasks display section&#10;        createTasksDisplaySection(mainContainer);&#10;        &#10;        setContentView(mainContainer);&#10;    }&#10;    &#10;    private void createGameStatusBar(LinearLayout parent) {&#10;        LinearLayout statusBar = UIStyleHelper.createGameStatusBar(this);&#10;        &#10;        // App title with icon&#10;        LinearLayout titleSection = new LinearLayout(this);&#10;        titleSection.setOrientation(LinearLayout.HORIZONTAL);&#10;        titleSection.setGravity(Gravity.CENTER_VERTICAL);&#10;        titleSection.setLayoutParams(new LinearLayout.LayoutParams(0, LinearLayout.LayoutParams.WRAP_CONTENT, 1));&#10;        &#10;        TextView gameIcon = new TextView(this);&#10;        gameIcon.setText(&quot;&quot;);&#10;        gameIcon.setTextSize(24);&#10;        gameIcon.setPadding(0, 0, 12, 0);&#10;        &#10;        TextView appTitle = new TextView(this);&#10;        appTitle.setText(&quot;Epic Quest List&quot;);&#10;        appTitle.setTextSize(20);&#10;        appTitle.setTextColor(UIStyleHelper.Colors.WHITE);&#10;        appTitle.setTypeface(null, android.graphics.Typeface.BOLD);&#10;        &#10;        titleSection.addView(gameIcon);&#10;        titleSection.addView(appTitle);&#10;        &#10;        // Coins display&#10;        coinsDisplay = new TextView(this);&#10;        coinsDisplay.setTextSize(16);&#10;        coinsDisplay.setTextColor(UIStyleHelper.Colors.WHITE);&#10;        coinsDisplay.setTypeface(null, android.graphics.Typeface.BOLD);&#10;        &#10;        // Character status&#10;        characterStatus = new TextView(this);&#10;        characterStatus.setTextSize(12);&#10;        characterStatus.setTextColor(UIStyleHelper.Colors.WHITE);&#10;        &#10;        LinearLayout statusSection = new LinearLayout(this);&#10;        statusSection.setOrientation(LinearLayout.VERTICAL);&#10;        statusSection.setGravity(Gravity.END);&#10;        statusSection.addView(coinsDisplay);&#10;        statusSection.addView(characterStatus);&#10;        &#10;        statusBar.addView(titleSection);&#10;        statusBar.addView(statusSection);&#10;        parent.addView(statusBar);&#10;    }&#10;    &#10;    private void createUrgentTasksSection(LinearLayout parent) {&#10;        urgentTasksContainer = new LinearLayout(this);&#10;        urgentTasksContainer.setOrientation(LinearLayout.VERTICAL);&#10;        urgentTasksContainer.setPadding(16, 8, 16, 8);&#10;        parent.addView(urgentTasksContainer);&#10;    }&#10;    &#10;    private void createNavigationSection(LinearLayout parent) {&#10;        LinearLayout navContainer = new LinearLayout(this);&#10;        navContainer.setOrientation(LinearLayout.HORIZONTAL);&#10;        navContainer.setPadding(16, 16, 16, 8);&#10;        navContainer.setBackgroundColor(UIStyleHelper.Colors.WHITE);&#10;        &#10;        Button characterShopButton = new Button(this);&#10;        characterShopButton.setText(&quot; &quot; + getString(R.string.character_shop));&#10;        characterShopButton.setLayoutParams(new LinearLayout.LayoutParams(0, LinearLayout.LayoutParams.WRAP_CONTENT, 1));&#10;        UIStyleHelper.stylePrimaryButton(characterShopButton);&#10;        characterShopButton.setOnClickListener(v -&gt; {&#10;            Intent intent = new Intent(this, CharacterShopActivity.class);&#10;            startActivity(intent);&#10;        });&#10;        &#10;        // Add spacing&#10;        View spacing1 = new View(this);&#10;        spacing1.setLayoutParams(new LinearLayout.LayoutParams(16, LinearLayout.LayoutParams.MATCH_PARENT));&#10;        &#10;        Button historyButton = new Button(this);&#10;        historyButton.setText(&quot; &quot; + getString(R.string.calendar_history));&#10;        historyButton.setLayoutParams(new LinearLayout.LayoutParams(0, LinearLayout.LayoutParams.WRAP_CONTENT, 1));&#10;        UIStyleHelper.styleSecondaryButton(historyButton);&#10;        historyButton.setOnClickListener(v -&gt; {&#10;            Intent intent = new Intent(this, CalendarHistoryActivity.class);&#10;            startActivity(intent);&#10;        });&#10;        &#10;        navContainer.addView(characterShopButton);&#10;        navContainer.addView(spacing1);&#10;        navContainer.addView(historyButton);&#10;        &#10;        // Add shadow separator&#10;        View separator = new View(this);&#10;        separator.setLayoutParams(new LinearLayout.LayoutParams(LinearLayout.LayoutParams.MATCH_PARENT, 3));&#10;        separator.setBackgroundColor(UIStyleHelper.Colors.DARK_GRAY);&#10;        &#10;        parent.addView(navContainer);&#10;        parent.addView(separator);&#10;    }&#10;    &#10;    private void createTaskInputSection(LinearLayout parent) {&#10;        LinearLayout inputContainer = UIStyleHelper.createTaskTypeContainer(this, UIStyleHelper.Colors.PRIMARY_BLUE);&#10;        inputContainer.setPadding(20, 20, 20, 20);&#10;        &#10;        // Section title&#10;        TextView sectionTitle = new TextView(this);&#10;        UIStyleHelper.styleHeaderText(sectionTitle, &quot;✨ Create New Quest&quot;);&#10;        &#10;        // Task type selector with icon&#10;        LinearLayout typeSection = new LinearLayout(this);&#10;        typeSection.setOrientation(LinearLayout.HORIZONTAL);&#10;        typeSection.setGravity(Gravity.CENTER_VERTICAL);&#10;        typeSection.setPadding(0, 8, 0, 12);&#10;        &#10;        TextView typeIcon = new TextView(this);&#10;        typeIcon.setText(&quot;&quot;);&#10;        typeIcon.setTextSize(18);&#10;        typeIcon.setPadding(0, 0, 12, 0);&#10;        &#10;        TextView typeLabel = new TextView(this);&#10;        UIStyleHelper.styleBodyText(typeLabel, &quot;Quest Type:&quot;);&#10;        typeLabel.setLayoutParams(new LinearLayout.LayoutParams(0, LinearLayout.LayoutParams.WRAP_CONTENT, 1));&#10;        &#10;        typeSection.addView(typeIcon);&#10;        typeSection.addView(typeLabel);&#10;        &#10;        taskTypeSpinner = new Spinner(this);&#10;        String[] taskTypes = {&#10;            &quot; To-Do Quest&quot;, &#10;            &quot; Daily Habit&quot;, &#10;            &quot; Master Plan&quot;, &#10;            &quot;⭐ Epic Activity&quot;&#10;        };&#10;        ArrayAdapter&lt;String&gt; adapter = new ArrayAdapter&lt;&gt;(this, android.R.layout.simple_spinner_item, taskTypes);&#10;        adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);&#10;        taskTypeSpinner.setAdapter(adapter);&#10;        taskTypeSpinner.setPadding(16, 12, 16, 12);&#10;        &#10;        // Task input with styling&#10;        todoedittext = new EditText(this);&#10;        todoedittext.setHint(&quot;Enter your epic quest...&quot;);&#10;        todoedittext.setTextSize(16);&#10;        todoedittext.setPadding(20, 16, 20, 16);&#10;        todoedittext.setBackgroundDrawable(UIStyleHelper.createStrokedBackground(&#10;            UIStyleHelper.Colors.WHITE, UIStyleHelper.Colors.PRIMARY_BLUE, 2, 12&#10;        ));&#10;        &#10;        taskTypeSpinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {&#10;            @Override&#10;            public void onItemSelected(AdapterView&lt;?&gt; parent, View view, int position, long id) {&#10;                updateTaskHint();&#10;            }&#10;            &#10;            @Override&#10;            public void onNothingSelected(AdapterView&lt;?&gt; parent) {}&#10;        });&#10;&#10;        // Enhanced add button with reminder options&#10;        LinearLayout buttonSection = new LinearLayout(this);&#10;        buttonSection.setOrientation(LinearLayout.HORIZONTAL);&#10;        &#10;        Button addButton = new Button(this);&#10;        addButton.setText(&quot;⚔️ Add Quest&quot;);&#10;        addButton.setLayoutParams(new LinearLayout.LayoutParams(0, LinearLayout.LayoutParams.WRAP_CONTENT, 1));&#10;        UIStyleHelper.styleSuccessButton(addButton);&#10;        addButton.setOnClickListener(v -&gt; {&#10;            String taskText = todoedittext.getText().toString().trim();&#10;            if (!taskText.isEmpty()) {&#10;                showTaskCreationDialog(taskText);&#10;                todoedittext.setText(&quot;&quot;);&#10;            } else {&#10;                Toast.makeText(this, &quot;⚠️ Please enter a quest description!&quot;, Toast.LENGTH_SHORT).show();&#10;            }&#10;        });&#10;        &#10;        View buttonSpacing = new View(this);&#10;        buttonSpacing.setLayoutParams(new LinearLayout.LayoutParams(8, LinearLayout.LayoutParams.MATCH_PARENT));&#10;        &#10;        Button quickAddButton = new Button(this);&#10;        quickAddButton.setText(&quot;⚡ Quick Add&quot;);&#10;        quickAddButton.setLayoutParams(new LinearLayout.LayoutParams(0, LinearLayout.LayoutParams.WRAP_CONTENT, 1));&#10;        UIStyleHelper.styleSecondaryButton(quickAddButton);&#10;        quickAddButton.setOnClickListener(v -&gt; {&#10;            String taskText = todoedittext.getText().toString().trim();&#10;            if (!taskText.isEmpty()) {&#10;                addNewTask(taskText);&#10;                todoedittext.setText(&quot;&quot;);&#10;                Toast.makeText(this, &quot; Quest added successfully!&quot;, Toast.LENGTH_SHORT).show();&#10;            } else {&#10;                Toast.makeText(this, &quot;⚠️ Please enter a quest description!&quot;, Toast.LENGTH_SHORT).show();&#10;            }&#10;        });&#10;&#10;        buttonSection.addView(addButton);&#10;        buttonSection.addView(buttonSpacing);&#10;        buttonSection.addView(quickAddButton);&#10;&#10;        inputContainer.addView(sectionTitle);&#10;        inputContainer.addView(typeSection);&#10;        inputContainer.addView(taskTypeSpinner);&#10;        &#10;        // Add spacing&#10;        View spacing = new View(this);&#10;        spacing.setLayoutParams(new LinearLayout.LayoutParams(LinearLayout.LayoutParams.MATCH_PARENT, 16));&#10;        inputContainer.addView(spacing);&#10;        &#10;        inputContainer.addView(todoedittext);&#10;        &#10;        // Add spacing&#10;        View spacing2 = new View(this);&#10;        spacing2.setLayoutParams(new LinearLayout.LayoutParams(LinearLayout.LayoutParams.MATCH_PARENT, 16));&#10;        inputContainer.addView(spacing2);&#10;        &#10;        inputContainer.addView(buttonSection);&#10;        &#10;        // Add margin to container&#10;        LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(&#10;            LinearLayout.LayoutParams.MATCH_PARENT, LinearLayout.LayoutParams.WRAP_CONTENT&#10;        );&#10;        params.setMargins(16, 16, 16, 8);&#10;        inputContainer.setLayoutParams(params);&#10;        &#10;        parent.addView(inputContainer);&#10;    }&#10;    &#10;    private void showTaskCreationDialog(String taskText) {&#10;        TaskItem newTask = new TaskItem(taskText, getSelectedTaskType());&#10;        &#10;        AlertDialog.Builder builder = new AlertDialog.Builder(this);&#10;        builder.setTitle(&quot;⚔️ Configure Your Quest&quot;);&#10;        builder.setMessage(&quot;Set up your quest with reminders and priorities!&quot;);&#10;        &#10;        // Create custom dialog layout&#10;        LinearLayout dialogLayout = new LinearLayout(this);&#10;        dialogLayout.setOrientation(LinearLayout.VERTICAL);&#10;        dialogLayout.setPadding(20, 20, 20, 20);&#10;        &#10;        // Priority selection&#10;        Button priorityButton = new Button(this);&#10;        priorityButton.setText(&quot; Set Priority: Medium&quot;);&#10;        UIStyleHelper.styleSecondaryButton(priorityButton);&#10;        priorityButton.setOnClickListener(v -&gt; {&#10;            TimeReminderDialog.showPriorityPicker(this, new TimeReminderDialog.OnTimeSetListener() {&#10;                @Override&#10;                public void onDueDateSet(Date dueDate) {}&#10;                @Override&#10;                public void onReminderSet(Date reminderTime) {}&#10;                @Override&#10;                public void onPrioritySet(TaskItem.Priority priority) {&#10;                    newTask.setPriority(priority);&#10;                    priorityButton.setText(&quot; Priority: &quot; + priority.toString());&#10;                }&#10;            });&#10;        });&#10;        &#10;        // Due date selection&#10;        Button dueDateButton = new Button(this);&#10;        dueDateButton.setText(&quot; Set Due Date&quot;);&#10;        UIStyleHelper.styleWarningButton(dueDateButton);&#10;        dueDateButton.setOnClickListener(v -&gt; {&#10;            TimeReminderDialog.showDueDatePicker(this, new TimeReminderDialog.OnTimeSetListener() {&#10;                @Override&#10;                public void onDueDateSet(Date dueDate) {&#10;                    newTask.setDueDate(dueDate);&#10;                    SimpleDateFormat df = new SimpleDateFormat(&quot;MMM dd, HH:mm&quot;, Locale.getDefault());&#10;                    dueDateButton.setText(&quot; Due: &quot; + df.format(dueDate));&#10;                }&#10;                @Override&#10;                public void onReminderSet(Date reminderTime) {}&#10;                @Override&#10;                public void onPrioritySet(TaskItem.Priority priority) {}&#10;            });&#10;        });&#10;        &#10;        // Reminder selection&#10;        Button reminderButton = new Button(this);&#10;        reminderButton.setText(&quot; Set Reminder&quot;);&#10;        UIStyleHelper.stylePrimaryButton(reminderButton);&#10;        reminderButton.setOnClickListener(v -&gt; {&#10;            TimeReminderDialog.showReminderPicker(this, new TimeReminderDialog.OnTimeSetListener() {&#10;                @Override&#10;                public void onDueDateSet(Date dueDate) {}&#10;                @Override&#10;                public void onReminderSet(Date reminderTime) {&#10;                    newTask.setReminderTime(reminderTime);&#10;                    newTask.setHasReminder(true);&#10;                    SimpleDateFormat df = new SimpleDateFormat(&quot;MMM dd, HH:mm&quot;, Locale.getDefault());&#10;                    reminderButton.setText(&quot; Remind: &quot; + df.format(reminderTime));&#10;                }&#10;                @Override&#10;                public void onPrioritySet(TaskItem.Priority priority) {}&#10;            });&#10;        });&#10;        &#10;        dialogLayout.addView(priorityButton);&#10;        dialogLayout.addView(dueDateButton);&#10;        dialogLayout.addView(reminderButton);&#10;        &#10;        builder.setView(dialogLayout);&#10;        builder.setPositiveButton(&quot;✅ Create Quest&quot;, (dialog, which) -&gt; {&#10;            addTaskWithReminder(newTask);&#10;            Toast.makeText(this, &quot; Quest created with reminders!&quot;, Toast.LENGTH_SHORT).show();&#10;        });&#10;        builder.setNegativeButton(&quot;❌ Cancel&quot;, null);&#10;        builder.show();&#10;    }&#10;    &#10;    private void createTasksDisplaySection(LinearLayout parent) {&#10;        // Section header&#10;        LinearLayout headerSection = new LinearLayout(this);&#10;        headerSection.setOrientation(LinearLayout.HORIZONTAL);&#10;        headerSection.setPadding(20, 16, 20, 8);&#10;        headerSection.setBackgroundColor(UIStyleHelper.Colors.WHITE);&#10;        &#10;        TextView activeQuestsTitle = new TextView(this);&#10;        UIStyleHelper.styleHeaderText(activeQuestsTitle, &quot;⚔️ Active Quests&quot;);&#10;        activeQuestsTitle.setLayoutParams(new LinearLayout.LayoutParams(0, LinearLayout.LayoutParams.WRAP_CONTENT, 1));&#10;        &#10;        TextView questCount = new TextView(this);&#10;        questCount.setText(&quot;0 quests&quot;);&#10;        questCount.setTextSize(14);&#10;        questCount.setTextColor(UIStyleHelper.Colors.DARK_GRAY);&#10;        questCount.setGravity(Gravity.END);&#10;        &#10;        headerSection.addView(activeQuestsTitle);&#10;        headerSection.addView(questCount);&#10;        &#10;        mainScrollView = new ScrollView(this);&#10;        mainScrollView.setFillViewport(true);&#10;        &#10;        todocontainer = new LinearLayout(this);&#10;        todocontainer.setOrientation(LinearLayout.VERTICAL);&#10;        todocontainer.setPadding(8, 8, 8, 8);&#10;        &#10;        mainScrollView.addView(todocontainer);&#10;        &#10;        parent.addView(headerSection);&#10;        parent.addView(mainScrollView);&#10;    }&#10;    &#10;    private void updateTaskHint() {&#10;        int selectedType = taskTypeSpinner.getSelectedItemPosition();&#10;        String[] hints = {&#10;            &quot;Enter your to-do quest...&quot;,&#10;            &quot;Enter your daily habit...&quot;, &#10;            &quot;Enter your master plan...&quot;,&#10;            &quot;Enter your epic activity...&quot;&#10;        };&#10;        todoedittext.setHint(hints[selectedType]);&#10;    }&#10;    &#10;    private void addNewTask(String taskText) {&#10;        TaskItem.TaskType type = getSelectedTaskType();&#10;        TaskItem newTask = new TaskItem(taskText, type);&#10;        &#10;        currentTasks.add(newTask);&#10;        taskManager.addTask(newTask);&#10;        &#10;        addTaskToUI(newTask);&#10;        updateQuestCount();&#10;    }&#10;    &#10;    private void addTaskWithReminder(TaskItem task) {&#10;        currentTasks.add(task);&#10;        taskManager.addTask(task);&#10;        &#10;        // Schedule reminder if set&#10;        if (task.hasReminder()) {&#10;            reminderManager.scheduleReminder(task);&#10;        }&#10;        &#10;        addTaskToUI(task);&#10;        updateQuestCount();&#10;        showUrgentTasks(); // Refresh urgent tasks&#10;    }&#10;    &#10;    private void showUrgentTasks() {&#10;        urgentTasksContainer.removeAllViews();&#10;        &#10;        // Show overdue tasks&#10;        for (TaskItem task : reminderManager.getOverdueTasks()) {&#10;            createUrgentTaskCard(task, true);&#10;        }&#10;        &#10;        // Show upcoming urgent tasks (next 4 hours)&#10;        for (TaskItem task : reminderManager.getUpcomingTasks(4)) {&#10;            if (task.isUrgent()) {&#10;                createUrgentTaskCard(task, false);&#10;            }&#10;        }&#10;    }&#10;    &#10;    private void createUrgentTaskCard(TaskItem task, boolean isOverdue) {&#10;        LinearLayout urgentCard = new LinearLayout(this);&#10;        urgentCard.setOrientation(LinearLayout.HORIZONTAL);&#10;        urgentCard.setPadding(16, 12, 16, 12);&#10;        &#10;        if (isOverdue) {&#10;            UIStyleHelper.styleOverdueCard(urgentCard);&#10;        } else {&#10;            UIStyleHelper.styleUrgentCard(urgentCard);&#10;        }&#10;        &#10;        TextView urgentIcon = new TextView(this);&#10;        urgentIcon.setText(isOverdue ? &quot;&quot; : &quot;⚠️&quot;);&#10;        urgentIcon.setTextSize(20);&#10;        urgentIcon.setPadding(0, 0, 12, 0);&#10;        &#10;        TextView urgentText = new TextView(this);&#10;        String message = (isOverdue ? &quot;OVERDUE: &quot; : &quot;URGENT: &quot;) + task.getTitle();&#10;        if (task.getDueDate() != null) {&#10;            message += &quot; (&quot; + task.getTimeUntilDue() + &quot;)&quot;;&#10;        }&#10;        urgentText.setText(message);&#10;        urgentText.setTextSize(14);&#10;        urgentText.setTextColor(isOverdue ? UIStyleHelper.Colors.DANGER_RED : UIStyleHelper.Colors.WARNING_ORANGE);&#10;        urgentText.setTypeface(null, android.graphics.Typeface.BOLD);&#10;        urgentText.setLayoutParams(new LinearLayout.LayoutParams(0, LinearLayout.LayoutParams.WRAP_CONTENT, 1));&#10;        &#10;        Button quickCompleteButton = new Button(this);&#10;        quickCompleteButton.setText(&quot;✅&quot;);&#10;        quickCompleteButton.setPadding(8, 8, 8, 8);&#10;        UIStyleHelper.styleSuccessButton(quickCompleteButton);&#10;        quickCompleteButton.setOnClickListener(v -&gt; {&#10;            completeTask(task, urgentCard);&#10;            showUrgentTasks(); // Refresh urgent tasks&#10;        });&#10;        &#10;        urgentCard.addView(urgentIcon);&#10;        urgentCard.addView(urgentText);&#10;        urgentCard.addView(quickCompleteButton);&#10;        &#10;        LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(&#10;            LinearLayout.LayoutParams.MATCH_PARENT, LinearLayout.LayoutParams.WRAP_CONTENT&#10;        );&#10;        params.setMargins(0, 4, 0, 4);&#10;        urgentCard.setLayoutParams(params);&#10;        &#10;        urgentTasksContainer.addView(urgentCard);&#10;    }&#10;    &#10;    private TaskItem.TaskType getSelectedTaskType() {&#10;        int selectedType = taskTypeSpinner.getSelectedItemPosition();&#10;        switch (selectedType) {&#10;            case 0: return TaskItem.TaskType.TODO;&#10;            case 1: return TaskItem.TaskType.HABIT;&#10;            case 2: return TaskItem.TaskType.PLANNING;&#10;            case 3: return TaskItem.TaskType.DAILY_ACTIVITY;&#10;            default: return TaskItem.TaskType.TODO;&#10;        }&#10;    }&#10;&#10;    private void addTaskToUI(TaskItem task) {&#10;        int typeColor = getTaskTypeColor(task.getType());&#10;        &#10;        LinearLayout taskCard = new LinearLayout(this);&#10;        taskCard.setOrientation(LinearLayout.VERTICAL);&#10;        UIStyleHelper.styleTaskCard(taskCard, typeColor);&#10;        &#10;        // Apply special styling for urgent/overdue tasks&#10;        if (task.isOverdue()) {&#10;            UIStyleHelper.styleOverdueCard(taskCard);&#10;        } else if (task.isUrgent()) {&#10;            UIStyleHelper.styleUrgentCard(taskCard);&#10;        }&#10;        &#10;        // Task header with emoji, title and reward&#10;        LinearLayout headerLayout = new LinearLayout(this);&#10;        headerLayout.setOrientation(LinearLayout.HORIZONTAL);&#10;        headerLayout.setGravity(Gravity.CENTER_VERTICAL);&#10;        &#10;        TextView taskIcon = new TextView(this);&#10;        taskIcon.setText(getTaskTypeEmoji(task.getType()));&#10;        taskIcon.setTextSize(20);&#10;        taskIcon.setPadding(0, 0, 12, 0);&#10;        &#10;        TextView taskTitle = new TextView(this);&#10;        taskTitle.setText(task.getTitle());&#10;        taskTitle.setTextSize(18);&#10;        taskTitle.setTextColor(UIStyleHelper.Colors.DARK_GRAY);&#10;        taskTitle.setTypeface(null, android.graphics.Typeface.BOLD);&#10;        taskTitle.setLayoutParams(new LinearLayout.LayoutParams(0, LinearLayout.LayoutParams.WRAP_CONTENT, 1));&#10;        &#10;        TextView rewardBadge = new TextView(this);&#10;        rewardBadge.setText(&quot; +&quot; + task.getCoinReward());&#10;        rewardBadge.setTextSize(14);&#10;        rewardBadge.setTextColor(UIStyleHelper.Colors.GOLD);&#10;        rewardBadge.setTypeface(null, android.graphics.Typeface.BOLD);&#10;        rewardBadge.setBackground(UIStyleHelper.createRoundedBackground(&#10;            UIStyleHelper.adjustColorAlpha(UIStyleHelper.Colors.GOLD, 0.2f), 12&#10;        ));&#10;        rewardBadge.setPadding(12, 6, 12, 6);&#10;        &#10;        headerLayout.addView(taskIcon);&#10;        headerLayout.addView(taskTitle);&#10;        headerLayout.addView(rewardBadge);&#10;        &#10;        // Task info section with time and priority&#10;        LinearLayout infoLayout = new LinearLayout(this);&#10;        infoLayout.setOrientation(LinearLayout.HORIZONTAL);&#10;        infoLayout.setPadding(32, 8, 0, 8);&#10;        &#10;        TextView taskInfo = new TextView(this);&#10;        String typeText = task.getType().toString().replace(&quot;_&quot;, &quot; &quot;);&#10;        taskInfo.setText(&quot; &quot; + typeText + &quot; • Penalty: -&quot; + task.getCoinPenalty() + &quot; coins&quot;);&#10;        taskInfo.setTextSize(12);&#10;        taskInfo.setTextColor(UIStyleHelper.Colors.DARK_GRAY);&#10;        taskInfo.setLayoutParams(new LinearLayout.LayoutParams(0, LinearLayout.LayoutParams.WRAP_CONTENT, 1));&#10;        &#10;        // Priority badge&#10;        TextView priorityBadge = new TextView(this);&#10;        UIStyleHelper.stylePriorityBadge(priorityBadge, task.getPriority());&#10;        &#10;        infoLayout.addView(taskInfo);&#10;        infoLayout.addView(priorityBadge);&#10;        &#10;        // Time information&#10;        if (task.getDueDate() != null || task.hasReminder()) {&#10;            LinearLayout timeLayout = new LinearLayout(this);&#10;            timeLayout.setOrientation(LinearLayout.HORIZONTAL);&#10;            timeLayout.setPadding(32, 4, 0, 8);&#10;            &#10;            if (task.getDueDate() != null) {&#10;                TextView dueTimeText = new TextView(this);&#10;                String timeText = &quot; Due: &quot; + task.getTimeUntilDue();&#10;                UIStyleHelper.styleTimeDisplay(dueTimeText, timeText, task.isUrgent());&#10;                timeLayout.addView(dueTimeText);&#10;                &#10;                if (task.hasReminder()) {&#10;                    View spacing = new View(this);&#10;                    spacing.setLayoutParams(new LinearLayout.LayoutParams(8, LinearLayout.LayoutParams.MATCH_PARENT));&#10;                    timeLayout.addView(spacing);&#10;                }&#10;            }&#10;            &#10;            if (task.hasReminder()) {&#10;                TextView reminderText = new TextView(this);&#10;                SimpleDateFormat df = new SimpleDateFormat(&quot;MMM dd, HH:mm&quot;, Locale.getDefault());&#10;                String reminderTimeText = &quot; &quot; + df.format(task.getReminderTime());&#10;                UIStyleHelper.styleTimeDisplay(reminderText, reminderTimeText, false);&#10;                timeLayout.addView(reminderText);&#10;            }&#10;            &#10;            taskCard.addView(timeLayout);&#10;        }&#10;        &#10;        // Action buttons with improved styling&#10;        LinearLayout buttonLayout = new LinearLayout(this);&#10;        buttonLayout.setOrientation(LinearLayout.HORIZONTAL);&#10;        buttonLayout.setPadding(0, 8, 0, 0);&#10;        &#10;        Button completeButton = new Button(this);&#10;        completeButton.setText(&quot;✅ Complete&quot;);&#10;        completeButton.setLayoutParams(new LinearLayout.LayoutParams(0, LinearLayout.LayoutParams.WRAP_CONTENT, 1));&#10;        UIStyleHelper.styleSuccessButton(completeButton);&#10;        completeButton.setOnClickListener(v -&gt; completeTask(task, taskCard));&#10;        &#10;        Button failButton = new Button(this);&#10;        failButton.setText(&quot;❌ Fail&quot;);&#10;        failButton.setLayoutParams(new LinearLayout.LayoutParams(0, LinearLayout.LayoutParams.WRAP_CONTENT, 1));&#10;        UIStyleHelper.styleDangerButton(failButton);&#10;        failButton.setOnClickListener(v -&gt; failTask(task, taskCard));&#10;        &#10;        Button deleteButton = new Button(this);&#10;        deleteButton.setText(&quot;️ Delete&quot;);&#10;        deleteButton.setLayoutParams(new LinearLayout.LayoutParams(0, LinearLayout.LayoutParams.WRAP_CONTENT, 1));&#10;        UIStyleHelper.styleWarningButton(deleteButton);&#10;        deleteButton.setOnClickListener(v -&gt; deleteTask(task, taskCard));&#10;        &#10;        // Add spacing between buttons&#10;        View spacing1 = new View(this);&#10;        spacing1.setLayoutParams(new LinearLayout.LayoutParams(8, LinearLayout.LayoutParams.MATCH_PARENT));&#10;        View spacing2 = new View(this);&#10;        spacing2.setLayoutParams(new LinearLayout.LayoutParams(8, LinearLayout.LayoutParams.MATCH_PARENT));&#10;        &#10;        buttonLayout.addView(completeButton);&#10;        buttonLayout.addView(spacing1);&#10;        buttonLayout.addView(failButton);&#10;        buttonLayout.addView(spacing2);&#10;        buttonLayout.addView(deleteButton);&#10;        &#10;        taskCard.addView(headerLayout);&#10;        taskCard.addView(infoLayout);&#10;        taskCard.addView(buttonLayout);&#10;        &#10;        // Add ripple effect&#10;        UIStyleHelper.addRippleEffect(taskCard);&#10;        &#10;        todocontainer.addView(taskCard);&#10;    }&#10;    &#10;    private int getTaskTypeColor(TaskItem.TaskType type) {&#10;        switch (type) {&#10;            case TODO: return UIStyleHelper.Colors.TODO_COLOR;&#10;            case HABIT: return UIStyleHelper.Colors.HABIT_COLOR;&#10;            case PLANNING: return UIStyleHelper.Colors.PLANNING_COLOR;&#10;            case DAILY_ACTIVITY: return UIStyleHelper.Colors.DAILY_COLOR;&#10;            default: return UIStyleHelper.Colors.PRIMARY_BLUE;&#10;        }&#10;    }&#10;    &#10;    private String getTaskTypeEmoji(TaskItem.TaskType type) {&#10;        switch (type) {&#10;            case TODO: return &quot;&quot;;&#10;            case HABIT: return &quot;&quot;;&#10;            case PLANNING: return &quot;&quot;;&#10;            case DAILY_ACTIVITY: return &quot;⭐&quot;;&#10;            default: return &quot;&quot;;&#10;        }&#10;    }&#10;    &#10;    private void completeTask(TaskItem task, LinearLayout taskLayout) {&#10;        if (gameManager.completeTask(task)) {&#10;            // Cancel reminder&#10;            reminderManager.cancelReminder(task.getId());&#10;            &#10;            // Update task in TaskManager as well&#10;            taskManager.updateTask(task);&#10;            &#10;            showSuccessMessage(&quot; Quest Completed! +&quot; + task.getCoinReward() + &quot; coins earned!&quot;);&#10;            &#10;            // Check if character was revived&#10;            Character activeChar = gameManager.getActiveCharacter();&#10;            if (activeChar != null &amp;&amp; activeChar.getStatus() == Character.CharacterStatus.ALIVE) {&#10;                if (!gameManager.hasCompletedTaskToday()) {&#10;                    showSuccessMessage(&quot;✨ &quot; + getString(R.string.character_revived));&#10;                }&#10;            }&#10;            &#10;            removeTaskFromUI(task, taskLayout);&#10;            updateGameStatus();&#10;            updateQuestCount();&#10;            showUrgentTasks(); // Refresh urgent tasks&#10;        }&#10;    }&#10;    &#10;    private void failTask(TaskItem task, LinearLayout taskLayout) {&#10;        new AlertDialog.Builder(this)&#10;            .setTitle(&quot; Fail Quest&quot;)&#10;            .setMessage(&quot;Are you sure you want to fail this quest? You will lose &quot; + task.getCoinPenalty() + &quot; coins and your character might be in danger!&quot;)&#10;            .setPositiveButton(&quot; Yes, Fail&quot;, (dialog, which) -&gt; {&#10;                // Cancel reminder&#10;                reminderManager.cancelReminder(task.getId());&#10;                &#10;                gameManager.failTask(task);&#10;                taskManager.updateTask(task);&#10;                &#10;                showErrorMessage(&quot; Quest Failed! -&quot; + task.getCoinPenalty() + &quot; coins lost!&quot;);&#10;                &#10;                // Check if character died&#10;                Character activeChar = gameManager.getActiveCharacter();&#10;                if (activeChar != null &amp;&amp; activeChar.getStatus() == Character.CharacterStatus.DEAD) {&#10;                    showErrorMessage(&quot;☠️ &quot; + getString(R.string.character_dead));&#10;                }&#10;                &#10;                removeTaskFromUI(task, taskLayout);&#10;                updateGameStatus();&#10;                updateQuestCount();&#10;                showUrgentTasks(); // Refresh urgent tasks&#10;            })&#10;            .setNegativeButton(&quot;️ Keep Fighting&quot;, null)&#10;            .show();&#10;    }&#10;    &#10;    private void deleteTask(TaskItem task, LinearLayout taskLayout) {&#10;        new AlertDialog.Builder(this)&#10;            .setTitle(&quot;️ Delete Quest&quot;)&#10;            .setMessage(&quot;Are you sure you want to delete this quest? This action cannot be undone.&quot;)&#10;            .setPositiveButton(&quot;️ Delete&quot;, (dialog, which) -&gt; {&#10;                // Cancel reminder&#10;                reminderManager.cancelReminder(task.getId());&#10;                &#10;                removeTaskFromUI(task, taskLayout);&#10;                updateQuestCount();&#10;                showUrgentTasks(); // Refresh urgent tasks&#10;            })&#10;            .setNegativeButton(&quot; Keep&quot;, null)&#10;            .show();&#10;    }&#10;    &#10;    private void removeTaskFromUI(TaskItem task, LinearLayout taskLayout) {&#10;        currentTasks.remove(task);&#10;        taskManager.removeTask(task);&#10;        todocontainer.removeView(taskLayout);&#10;    }&#10;    &#10;    private void loadCurrentTasks() {&#10;        todocontainer.removeAllViews();&#10;        for (TaskItem task : currentTasks) {&#10;            if (task.getStatus() == TaskItem.TaskStatus.PENDING) {&#10;                addTaskToUI(task);&#10;            }&#10;        }&#10;        updateQuestCount();&#10;    }&#10;    &#10;    private void updateGameStatus() {&#10;        // Update coins display with beautiful styling&#10;        UIStyleHelper.styleCoinDisplay(coinsDisplay, gameManager.getCoins());&#10;        &#10;        // Update character status with styling&#10;        Character activeChar = gameManager.getActiveCharacter();&#10;        if (activeChar != null) {&#10;            boolean isAlive = activeChar.getStatus() == Character.CharacterStatus.ALIVE;&#10;            String status = (isAlive ? &quot; &quot; : &quot; &quot;) + activeChar.getName() + &quot; (Lv.&quot; + activeChar.getLevel() + &quot;)&quot;;&#10;            UIStyleHelper.styleCharacterStatus(characterStatus, status, isAlive);&#10;        } else {&#10;            characterStatus.setText(&quot; No active character&quot;);&#10;            characterStatus.setTextColor(UIStyleHelper.Colors.DANGER_RED);&#10;        }&#10;    }&#10;    &#10;    private void updateQuestCount() {&#10;        // This method would need to find and update the quest count display&#10;        int activeCount = 0;&#10;        for (TaskItem task : currentTasks) {&#10;            if (task.getStatus() == TaskItem.TaskStatus.PENDING) {&#10;                activeCount++;&#10;            }&#10;        }&#10;        // Quest count display logic would go here&#10;    }&#10;    &#10;    private void showSuccessMessage(String message) {&#10;        Toast toast = Toast.makeText(this, message, Toast.LENGTH_LONG);&#10;        toast.show();&#10;    }&#10;    &#10;    private void showErrorMessage(String message) {&#10;        Toast toast = Toast.makeText(this, message, Toast.LENGTH_LONG);&#10;        toast.show();&#10;    }&#10;    &#10;    @Override&#10;    protected void onResume() {&#10;        super.onResume();&#10;        updateGameStatus(); // Update when returning from other activities&#10;        showUrgentTasks(); // Refresh urgent tasks when returning&#10;    }&#10;    &#10;    @Override&#10;    protected void onDestroy() {&#10;        super.onDestroy();&#10;        if (reminderManager != null) {&#10;            reminderManager.shutdown();&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/todolist/app/managers/ReminderManager.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/todolist/app/managers/ReminderManager.java" />
              <option name="updatedContent" value="package com.todolist.app.managers;&#10;&#10;import android.content.Context;&#10;import android.os.Handler;&#10;import android.os.Looper;&#10;import android.widget.Toast;&#10;import com.todolist.app.models.TaskItem;&#10;import java.util.*;&#10;import java.util.concurrent.ConcurrentHashMap;&#10;&#10;public class ReminderManager {&#10;    private static ReminderManager instance;&#10;    private Context context;&#10;    private Handler handler;&#10;    private Map&lt;String, Runnable&gt; activeReminders;&#10;    private TaskManager taskManager;&#10;    private GameManager gameManager;&#10;    private boolean isActive;&#10;    &#10;    private ReminderManager() {&#10;        handler = new Handler(Looper.getMainLooper());&#10;        activeReminders = new ConcurrentHashMap&lt;&gt;();&#10;        isActive = true;&#10;    }&#10;    &#10;    public static ReminderManager getInstance() {&#10;        if (instance == null) {&#10;            instance = new ReminderManager();&#10;        }&#10;        return instance;&#10;    }&#10;    &#10;    public void initialize(Context context) {&#10;        this.context = context;&#10;        this.taskManager = TaskManager.getInstance();&#10;        this.gameManager = GameManager.getInstance();&#10;        startReminderSystem();&#10;    }&#10;    &#10;    private void startReminderSystem() {&#10;        // Check for reminders every minute&#10;        Runnable reminderChecker = new Runnable() {&#10;            @Override&#10;            public void run() {&#10;                if (isActive) {&#10;                    checkAllReminders();&#10;                    updateOverdueStatus();&#10;                    handler.postDelayed(this, 60000); // Check every minute&#10;                }&#10;            }&#10;        };&#10;        handler.post(reminderChecker);&#10;    }&#10;    &#10;    public void scheduleReminder(TaskItem task) {&#10;        if (task.getReminderTime() == null || !task.hasReminder()) return;&#10;        &#10;        cancelReminder(task.getId());&#10;        &#10;        long currentTime = System.currentTimeMillis();&#10;        long reminderTime = task.getReminderTime().getTime();&#10;        long delay = reminderTime - currentTime;&#10;        &#10;        if (delay &gt; 0) {&#10;            Runnable reminderRunnable = () -&gt; showReminder(task);&#10;            handler.postDelayed(reminderRunnable, delay);&#10;            activeReminders.put(task.getId(), reminderRunnable);&#10;        }&#10;    }&#10;    &#10;    public void cancelReminder(String taskId) {&#10;        Runnable reminder = activeReminders.remove(taskId);&#10;        if (reminder != null) {&#10;            handler.removeCallbacks(reminder);&#10;        }&#10;    }&#10;    &#10;    private void checkAllReminders() {&#10;        if (taskManager == null) return;&#10;        &#10;        List&lt;TaskItem&gt; allTasks = taskManager.getAllTasks();&#10;        Date currentTime = new Date();&#10;        &#10;        for (TaskItem task : allTasks) {&#10;            if (task.getStatus() != TaskItem.TaskStatus.PENDING) continue;&#10;            &#10;            // Check for due date reminders&#10;            if (task.getDueDate() != null) {&#10;                checkDueDateReminders(task, currentTime);&#10;            }&#10;            &#10;            // Check for custom reminders&#10;            if (task.hasReminder() &amp;&amp; task.getReminderTime() != null) {&#10;                checkCustomReminder(task, currentTime);&#10;            }&#10;            &#10;            // Check for recurring reminders&#10;            if (task.isRecurring()) {&#10;                checkRecurringReminder(task, currentTime);&#10;            }&#10;        }&#10;    }&#10;    &#10;    private void checkDueDateReminders(TaskItem task, Date currentTime) {&#10;        if (task.getDueDate() == null) return;&#10;        &#10;        long timeUntilDue = task.getDueDate().getTime() - currentTime.getTime();&#10;        long hours = timeUntilDue / (1000 * 60 * 60);&#10;        &#10;        // Remind at different intervals based on urgency&#10;        if (hours == 24) {&#10;            showUrgencyReminder(task, &quot; Due Tomorrow!&quot;, &quot;Your quest '&quot; + task.getTitle() + &quot;' is due tomorrow!&quot;);&#10;        } else if (hours == 2) {&#10;            showUrgencyReminder(task, &quot;⚠️ Due Soon!&quot;, &quot;Your quest '&quot; + task.getTitle() + &quot;' is due in 2 hours!&quot;);&#10;        } else if (hours == 0 &amp;&amp; timeUntilDue &gt; 0 &amp;&amp; timeUntilDue &lt;= 60 * 60 * 1000) {&#10;            showUrgencyReminder(task, &quot; Due Now!&quot;, &quot;Your quest '&quot; + task.getTitle() + &quot;' is due within an hour!&quot;);&#10;        } else if (timeUntilDue &lt; 0) {&#10;            showUrgencyReminder(task, &quot; Overdue!&quot;, &quot;Quest '&quot; + task.getTitle() + &quot;' is overdue! Your character is in danger!&quot;);&#10;        }&#10;    }&#10;    &#10;    private void checkCustomReminder(TaskItem task, Date currentTime) {&#10;        long timeDiff = Math.abs(task.getReminderTime().getTime() - currentTime.getTime());&#10;        &#10;        // If within 1 minute of reminder time&#10;        if (timeDiff &lt;= 60000) {&#10;            showReminder(task);&#10;            task.setHasReminder(false); // Mark as shown&#10;        }&#10;    }&#10;    &#10;    private void checkRecurringReminder(TaskItem task, Date currentTime) {&#10;        if (task.getType() == TaskItem.TaskType.DAILY_ACTIVITY) {&#10;            // Daily reminder at 9 AM&#10;            Calendar cal = Calendar.getInstance();&#10;            if (cal.get(Calendar.HOUR_OF_DAY) == 9 &amp;&amp; cal.get(Calendar.MINUTE) == 0) {&#10;                showRecurringReminder(task, &quot; Daily Quest Available!&quot;, &#10;                    &quot;Time for your daily quest: &quot; + task.getTitle());&#10;            }&#10;        } else if (task.getType() == TaskItem.TaskType.HABIT) {&#10;            // Habit reminder every few hours&#10;            Calendar cal = Calendar.getInstance();&#10;            int hour = cal.get(Calendar.HOUR_OF_DAY);&#10;            if ((hour == 10 || hour == 14 || hour == 18) &amp;&amp; cal.get(Calendar.MINUTE) == 0) {&#10;                showRecurringReminder(task, &quot; Habit Check!&quot;, &#10;                    &quot;Don't forget your habit: &quot; + task.getTitle());&#10;            }&#10;        }&#10;    }&#10;    &#10;    private void updateOverdueStatus() {&#10;        if (taskManager == null) return;&#10;        &#10;        List&lt;TaskItem&gt; allTasks = taskManager.getAllTasks();&#10;        for (TaskItem task : allTasks) {&#10;            task.updateOverdueStatus();&#10;            &#10;            if (task.isOverdue() &amp;&amp; task.getStatus() == TaskItem.TaskStatus.PENDING) {&#10;                // Apply overdue penalty&#10;                applyOverduePenalty(task);&#10;            }&#10;        }&#10;    }&#10;    &#10;    private void applyOverduePenalty(TaskItem task) {&#10;        if (gameManager != null) {&#10;            // Increase penalty for overdue tasks&#10;            int overduePenalty = task.getCoinPenalty() / 2;&#10;            // Apply gradual penalty but don't complete the task&#10;            showUrgencyReminder(task, &quot;⚡ Overdue Penalty!&quot;, &#10;                &quot;Lost &quot; + overduePenalty + &quot; coins for overdue quest: &quot; + task.getTitle());&#10;        }&#10;    }&#10;    &#10;    private void showReminder(TaskItem task) {&#10;        if (context == null) return;&#10;        &#10;        String title = &quot; Quest Reminder!&quot;;&#10;        String message = &quot;Time to work on: &quot; + task.getTitle();&#10;        &#10;        if (task.getDueDate() != null) {&#10;            message += &quot;\nDue: &quot; + task.getTimeUntilDue();&#10;        }&#10;        &#10;        showNotification(title, message, task);&#10;    }&#10;    &#10;    private void showUrgencyReminder(TaskItem task, String title, String message) {&#10;        if (context == null) return;&#10;        showNotification(title, message, task);&#10;    }&#10;    &#10;    private void showRecurringReminder(TaskItem task, String title, String message) {&#10;        if (context == null) return;&#10;        showNotification(title, message, task);&#10;    }&#10;    &#10;    private void showNotification(String title, String message, TaskItem task) {&#10;        // Show toast notification (in a real app, you'd use proper notifications)&#10;        handler.post(() -&gt; {&#10;            if (context != null) {&#10;                String fullMessage = title + &quot;\n&quot; + message;&#10;                Toast.makeText(context, fullMessage, Toast.LENGTH_LONG).show();&#10;            }&#10;        });&#10;        &#10;        // Log reminder for debugging&#10;        System.out.println(&quot;REMINDER: &quot; + title + &quot; - &quot; + message);&#10;    }&#10;    &#10;    public List&lt;TaskItem&gt; getUpcomingTasks(int hoursAhead) {&#10;        List&lt;TaskItem&gt; upcomingTasks = new ArrayList&lt;&gt;();&#10;        if (taskManager == null) return upcomingTasks;&#10;        &#10;        long currentTime = System.currentTimeMillis();&#10;        long timeAhead = hoursAhead * 60 * 60 * 1000;&#10;        &#10;        for (TaskItem task : taskManager.getAllTasks()) {&#10;            if (task.getStatus() != TaskItem.TaskStatus.PENDING) continue;&#10;            &#10;            if (task.getDueDate() != null) {&#10;                long timeToDue = task.getDueDate().getTime() - currentTime;&#10;                if (timeToDue &gt; 0 &amp;&amp; timeToDue &lt;= timeAhead) {&#10;                    upcomingTasks.add(task);&#10;                }&#10;            }&#10;        }&#10;        &#10;        // Sort by due date&#10;        upcomingTasks.sort((t1, t2) -&gt; t1.getDueDate().compareTo(t2.getDueDate()));&#10;        return upcomingTasks;&#10;    }&#10;    &#10;    public List&lt;TaskItem&gt; getOverdueTasks() {&#10;        List&lt;TaskItem&gt; overdueTasks = new ArrayList&lt;&gt;();&#10;        if (taskManager == null) return overdueTasks;&#10;        &#10;        for (TaskItem task : taskManager.getAllTasks()) {&#10;            if (task.getStatus() == TaskItem.TaskStatus.PENDING &amp;&amp; task.isOverdue()) {&#10;                overdueTasks.add(task);&#10;            }&#10;        }&#10;        &#10;        return overdueTasks;&#10;    }&#10;    &#10;    public void setActive(boolean active) {&#10;        this.isActive = active;&#10;    }&#10;    &#10;    public void shutdown() {&#10;        isActive = false;&#10;        handler.removeCallbacksAndMessages(null);&#10;        activeReminders.clear();&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/todolist/app/models/TaskItem.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/todolist/app/models/TaskItem.java" />
              <option name="originalContent" value="package com.todolist.app.models;&#10;&#10;import java.util.Date;&#10;&#10;public class TaskItem {&#10;    public enum TaskType {&#10;        TODO, HABIT, PLANNING, DAILY_ACTIVITY&#10;    }&#10;&#10;    public enum TaskStatus {&#10;        PENDING, COMPLETED, FAILED, SKIPPED&#10;    }&#10;&#10;    private String id;&#10;    private String title;&#10;    private String description;&#10;    private TaskType type;&#10;    private TaskStatus status;&#10;    private Date createdDate;&#10;    private Date completedDate;&#10;    private Date dueDate;&#10;    private int coinReward;&#10;    private int coinPenalty;&#10;    private boolean isRecurring;&#10;    private int streakCount;&#10;&#10;    public TaskItem(String title, TaskType type) {&#10;        this.id = System.currentTimeMillis() + &quot;_&quot; + Math.random();&#10;        this.title = title;&#10;        this.type = type;&#10;        this.status = TaskStatus.PENDING;&#10;        this.createdDate = new Date();&#10;        this.coinReward = getCoinRewardByType(type);&#10;        this.coinPenalty = getCoinPenaltyByType(type);&#10;        this.streakCount = 0;&#10;    }&#10;&#10;    private int getCoinRewardByType(TaskType type) {&#10;        switch (type) {&#10;            case TODO: return 10;&#10;            case HABIT: return 15;&#10;            case PLANNING: return 20;&#10;            case DAILY_ACTIVITY: return 5;&#10;            default: return 10;&#10;        }&#10;    }&#10;&#10;    private int getCoinPenaltyByType(TaskType type) {&#10;        switch (type) {&#10;            case TODO: return 5;&#10;            case HABIT: return 10;&#10;            case PLANNING: return 15;&#10;            case DAILY_ACTIVITY: return 3;&#10;            default: return 5;&#10;        }&#10;    }&#10;&#10;    // Getters and Setters&#10;    public String getId() { return id; }&#10;    public String getTitle() { return title; }&#10;    public void setTitle(String title) { this.title = title; }&#10;    public String getDescription() { return description; }&#10;    public void setDescription(String description) { this.description = description; }&#10;    public TaskType getType() { return type; }&#10;    public void setType(TaskType type) { this.type = type; }&#10;    public TaskStatus getStatus() { return status; }&#10;    public void setStatus(TaskStatus status) { this.status = status; }&#10;    public Date getCreatedDate() { return createdDate; }&#10;    public Date getCompletedDate() { return completedDate; }&#10;    public void setCompletedDate(Date completedDate) { this.completedDate = completedDate; }&#10;    public Date getDueDate() { return dueDate; }&#10;    public void setDueDate(Date dueDate) { this.dueDate = dueDate; }&#10;    public int getCoinReward() { return coinReward; }&#10;    public int getCoinPenalty() { return coinPenalty; }&#10;    public boolean isRecurring() { return isRecurring; }&#10;    public void setRecurring(boolean recurring) { isRecurring = recurring; }&#10;    public int getStreakCount() { return streakCount; }&#10;    public void setStreakCount(int streakCount) { this.streakCount = streakCount; }&#10;}&#10;" />
              <option name="updatedContent" value="package com.todolist.app.models;&#10;&#10;import java.util.Date;&#10;&#10;public class TaskItem {&#10;    public enum TaskType {&#10;        TODO, HABIT, PLANNING, DAILY_ACTIVITY&#10;    }&#10;    &#10;    public enum TaskStatus {&#10;        PENDING, COMPLETED, FAILED, SKIPPED&#10;    }&#10;    &#10;    public enum Priority {&#10;        LOW, MEDIUM, HIGH, URGENT&#10;    }&#10;    &#10;    private String id;&#10;    private String title;&#10;    private String description;&#10;    private TaskType type;&#10;    private TaskStatus status;&#10;    private Priority priority;&#10;    private Date createdDate;&#10;    private Date completedDate;&#10;    private Date dueDate;&#10;    private Date reminderTime;&#10;    private boolean hasReminder;&#10;    private boolean isRecurring;&#10;    private int recurringDays; // For habits - repeat every X days&#10;    private int coinReward;&#10;    private int coinPenalty;&#10;    private int streakCount;&#10;    private boolean isOverdue;&#10;    &#10;    public TaskItem(String title, TaskType type) {&#10;        this.id = System.currentTimeMillis() + &quot;_&quot; + Math.random();&#10;        this.title = title;&#10;        this.type = type;&#10;        this.status = TaskStatus.PENDING;&#10;        this.priority = Priority.MEDIUM;&#10;        this.createdDate = new Date();&#10;        this.coinReward = getCoinRewardByType(type);&#10;        this.coinPenalty = getCoinPenaltyByType(type);&#10;        this.streakCount = 0;&#10;        this.hasReminder = false;&#10;        this.isRecurring = (type == TaskType.HABIT || type == TaskType.DAILY_ACTIVITY);&#10;        this.recurringDays = (type == TaskType.DAILY_ACTIVITY) ? 1 : 7; // Daily or weekly&#10;        this.isOverdue = false;&#10;    }&#10;    &#10;    private int getCoinRewardByType(TaskType type) {&#10;        switch (type) {&#10;            case TODO: return 10;&#10;            case HABIT: return 15;&#10;            case PLANNING: return 20;&#10;            case DAILY_ACTIVITY: return 5;&#10;            default: return 10;&#10;        }&#10;    }&#10;    &#10;    private int getCoinPenaltyByType(TaskType type) {&#10;        switch (type) {&#10;            case TODO: return 5;&#10;            case HABIT: return 10;&#10;            case PLANNING: return 15;&#10;            case DAILY_ACTIVITY: return 3;&#10;            default: return 5;&#10;        }&#10;    }&#10;    &#10;    public boolean isUrgent() {&#10;        if (dueDate == null) return false;&#10;        &#10;        long currentTime = System.currentTimeMillis();&#10;        long dueTime = dueDate.getTime();&#10;        long timeDiff = dueTime - currentTime;&#10;        &#10;        // Consider urgent if due within 2 hours or overdue&#10;        return timeDiff &lt;= 2 * 60 * 60 * 1000 || isOverdue;&#10;    }&#10;    &#10;    public boolean isDueToday() {&#10;        if (dueDate == null) return false;&#10;        &#10;        long currentTime = System.currentTimeMillis();&#10;        long dueTime = dueDate.getTime();&#10;        long timeDiff = Math.abs(dueTime - currentTime);&#10;        &#10;        // Due today if within 24 hours&#10;        return timeDiff &lt;= 24 * 60 * 60 * 1000;&#10;    }&#10;    &#10;    public void updateOverdueStatus() {&#10;        if (dueDate != null &amp;&amp; status == TaskStatus.PENDING) {&#10;            this.isOverdue = new Date().after(dueDate);&#10;        }&#10;    }&#10;    &#10;    public String getTimeUntilDue() {&#10;        if (dueDate == null) return &quot;&quot;;&#10;        &#10;        long currentTime = System.currentTimeMillis();&#10;        long dueTime = dueDate.getTime();&#10;        long timeDiff = dueTime - currentTime;&#10;        &#10;        if (timeDiff &lt; 0) {&#10;            return &quot;Overdue&quot;;&#10;        }&#10;        &#10;        long hours = timeDiff / (60 * 60 * 1000);&#10;        long minutes = (timeDiff % (60 * 60 * 1000)) / (60 * 1000);&#10;        &#10;        if (hours &gt; 24) {&#10;            long days = hours / 24;&#10;            return days + &quot; days&quot;;&#10;        } else if (hours &gt; 0) {&#10;            return hours + &quot;h &quot; + minutes + &quot;m&quot;;&#10;        } else {&#10;            return minutes + &quot; minutes&quot;;&#10;        }&#10;    }&#10;    &#10;    // Getters and Setters&#10;    public String getId() { return id; }&#10;    public String getTitle() { return title; }&#10;    public void setTitle(String title) { this.title = title; }&#10;    public String getDescription() { return description; }&#10;    public void setDescription(String description) { this.description = description; }&#10;    public TaskType getType() { return type; }&#10;    public void setType(TaskType type) { this.type = type; }&#10;    public TaskStatus getStatus() { return status; }&#10;    public void setStatus(TaskStatus status) { this.status = status; }&#10;    public Priority getPriority() { return priority; }&#10;    public void setPriority(Priority priority) { this.priority = priority; }&#10;    public Date getCreatedDate() { return createdDate; }&#10;    public Date getCompletedDate() { return completedDate; }&#10;    public void setCompletedDate(Date completedDate) { this.completedDate = completedDate; }&#10;    public Date getDueDate() { return dueDate; }&#10;    public void setDueDate(Date dueDate) { this.dueDate = dueDate; }&#10;    public Date getReminderTime() { return reminderTime; }&#10;    public void setReminderTime(Date reminderTime) { this.reminderTime = reminderTime; }&#10;    public boolean hasReminder() { return hasReminder; }&#10;    public void setHasReminder(boolean hasReminder) { this.hasReminder = hasReminder; }&#10;    public boolean isRecurring() { return isRecurring; }&#10;    public void setRecurring(boolean recurring) { isRecurring = recurring; }&#10;    public int getRecurringDays() { return recurringDays; }&#10;    public void setRecurringDays(int recurringDays) { this.recurringDays = recurringDays; }&#10;    public int getCoinReward() { return coinReward; }&#10;    public int getCoinPenalty() { return coinPenalty; }&#10;    public int getStreakCount() { return streakCount; }&#10;    public void setStreakCount(int streakCount) { this.streakCount = streakCount; }&#10;    public boolean isOverdue() { return isOverdue; }&#10;    public void setOverdue(boolean overdue) { isOverdue = overdue; }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>